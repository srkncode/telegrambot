import os
import requests
import time
import json
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Loglama ayarlarÄ±
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token'Ä±nÄ± buraya ekleyin
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "BURAYA_BOT_TOKEN_EKLE")

# News API iÃ§in API anahtarÄ± (https://newsapi.org/ adresinden Ã¼cretsiz alabilirsiniz)
NEWS_API_KEY = os.environ.get("NEWS_API_KEY", "BURAYA_NEWS_API_KEY_EKLE")

# BaÅŸlangÄ±Ã§ komutu iÃ§in iÅŸleyici
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Bot baÅŸladÄ±ÄŸÄ±nda karÅŸÄ±lama mesajÄ± gÃ¶nderir."""
    user = update.effective_user
    await update.message.reply_text(
        f'Merhaba {user.first_name}! Haber botuna hoÅŸ geldiniz. '
        f'Son haberleri gÃ¶rmek iÃ§in /haberler komutunu kullanabilirsiniz.'
    )

# Haber alma fonksiyonu
async def get_news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Haberleri alÄ±p kullanÄ±cÄ±ya gÃ¶nderir."""
    try:
        # VarsayÄ±lan olarak TÃ¼rkiye haberlerini al
        url = f"https://newsapi.org/v2/top-headlines?country=tr&apiKey={NEWS_API_KEY}"
        
        # EÄŸer kullanÄ±cÄ± bir kategori belirttiyse
        if context.args and len(context.args) > 0:
            category = context.args[0].lower()
            valid_categories = ['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology']
            
            if category in valid_categories:
                url = f"https://newsapi.org/v2/top-headlines?country=tr&category={category}&apiKey={NEWS_API_KEY}"
                await update.message.reply_text(f"{category.capitalize()} kategorisindeki son haberler:")
            else:
                await update.message.reply_text(
                    f"GeÃ§ersiz kategori. LÃ¼tfen ÅŸu kategorilerden birini seÃ§in: {', '.join(valid_categories)}"
                )
                return
        else:
            await update.message.reply_text("Ä°ÅŸte gÃ¼nÃ¼n Ã¶ne Ã§Ä±kan haberleri:")
        
        response = requests.get(url)
        news = response.json()
        
        if news["status"] == "ok" and news["articles"]:
            # En fazla 5 haber gÃ¶nder
            for article in news["articles"][:5]:
                news_title = article["title"]
                news_description = article.get("description", "AÃ§Ä±klama yok")
                news_url = article["url"]
                
                message = f"ğŸ“° *{news_title}*\n\n{news_description}\n\nğŸ”— [Haberin devamÄ± iÃ§in tÄ±klayÄ±n]({news_url})"
                await update.message.reply_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text("ÃœzgÃ¼nÃ¼m, ÅŸu anda haber bulunamadÄ±.")
    except Exception as e:
        logger.error(f"Haber alÄ±nÄ±rken hata oluÅŸtu: {e}")
        await update.message.reply_text("Haberler alÄ±nÄ±rken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.")

# YardÄ±m komutu
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """YardÄ±m mesajÄ± gÃ¶nderir."""
    help_text = """
*Haber Botu KomutlarÄ±:*

/start - Botu baÅŸlatÄ±r
/haberler - Genel gÃ¼ncel haberleri gÃ¶sterir
/haberler [kategori] - Belirli bir kategorideki haberleri gÃ¶sterir
  Kategoriler: business, entertainment, general, health, science, sports, technology
/yardim - Bu yardÄ±m mesajÄ±nÄ± gÃ¶sterir

Ã–rnek: /haberler sports
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

# TanÄ±mlanmamÄ±ÅŸ mesajlara cevap ver
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Bilinmeyen komutlara yanÄ±t verir."""
    await update.message.reply_text(
        "ÃœzgÃ¼nÃ¼m, bu komutu anlamadÄ±m. YardÄ±m iÃ§in /yardim yazabilirsiniz."
    )

def main() -> None:
    """Botu baÅŸlatÄ±r."""
    # Uygulama oluÅŸtur
    application = Application.builder().token(TOKEN).build()

    # Komut iÅŸleyicilerini ekle
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("haberler", get_news))
    application.add_handler(CommandHandler("yardim", help_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # TanÄ±mlanmamÄ±ÅŸ komutlarÄ± yakala
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # Botu baÅŸlat
    application.run_polling()

if __name__ == "__main__":
    main()
