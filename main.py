import os
import requests
import logging
import time
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# Loglama ayarlarƒ±
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token'ƒ±
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "BURAYA_BOT_TOKEN_EKLE")

# Bazƒ± BIST sembollerini tanƒ±mlayalƒ±m
BIST_SYMBOLS = {
    'akbnk': 'AKBNK.IS',
    'thyao': 'THYAO.IS',
    'eregl': 'EREGL.IS',
    'garan': 'GARAN.IS',
    'asels': 'ASELS.IS',
    'tuprs': 'TUPRS.IS',
    'sise': 'SISE.IS',
    'kchol': 'KCHOL.IS',
    'arclk': 'ARCLK.IS',
    'ykbnk': 'YKBNK.IS',
    'bimas': 'BIMAS.IS',
    'tskb': 'TSKB.IS',
    'petkm': 'PETKM.IS',
    'froto': 'FROTO.IS',
    'tcell': 'TCELL.IS',
    'halkb': 'HALKB.IS',
    'vestl': 'VESTL.IS',
    'vakbn': 'VAKBN.IS',
    'toaso': 'TOASO.IS',
    'sahol': 'SAHOL.IS',
}

# Ba≈ülangƒ±√ß komutu i√ßin i≈üleyici
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Bot ba≈üladƒ±ƒüƒ±nda kar≈üƒ±lama mesajƒ± g√∂nderir."""
    user = update.effective_user
    await update.message.reply_text(
        f'Merhaba {user.first_name}! Borsa ƒ∞stanbul hisse analiz botuna ho≈ü geldiniz. '
        f'Hisse bilgilerini g√∂rmek i√ßin /hisse SEMBOL komutunu kullanabilirsiniz. √ñrnek: /hisse akbnk'
    )

# Yardƒ±m komutu
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Yardƒ±m mesajƒ± g√∂nderir."""
    symbols_list = ', '.join(BIST_SYMBOLS.keys())
    help_text = f"""
*BIST Hisse Analiz Botu Komutlarƒ±:*

/start - Botu ba≈ülatƒ±r
/hisse [sembol] - Belirtilen hissenin fiyat ve teknik analiz bilgilerini g√∂sterir
/liste - Sorgulayabileceƒüiniz hisse sembollerini listeler
/yardim - Bu yardƒ±m mesajƒ±nƒ± g√∂sterir

Sorgulayabileceƒüiniz bazƒ± semboller: {symbols_list}

√ñrnek: /hisse akbnk
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

# Hisse listesini g√∂ster
async def list_stocks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sorgulanabilecek hisse listesini g√∂sterir"""
    symbols_list = ', '.join([f"{key} ({value.replace('.IS', '')})" for key, value in BIST_SYMBOLS.items()])
    await update.message.reply_text(
        f"*Sorgulanabilecek BIST Hisseleri:*\n\n{symbols_list}",
        parse_mode='Markdown'
    )

# Destek ve diren√ß b√∂lgelerini hesaplama
def calculate_support_resistance(data, periods=14):
    """Basit bir destek ve diren√ß hesaplama fonksiyonu"""
    # Son d√∂nem i√ßin destek ve diren√ß seviyeleri
    highs = data['High'].tail(periods)
    lows = data['Low'].tail(periods)
    close = data['Close'].iloc[-1]
    
    # Destek seviyeleri (Son d√∂nemdeki en d√º≈ü√ºkler)
    supports = lows.nsmallest(3).values
    
    # Diren√ß seviyeleri (Son d√∂nemdeki en y√ºksekler)
    resistances = highs.nlargest(3).values
    
    # G√ºncel fiyata g√∂re destek ve diren√ßleri filtrele
    supports = [s for s in supports if s < close]
    resistances = [r for r in resistances if r > close]
    
    return supports, resistances

# Hisse bilgilerini g√∂ster
async def stock_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Belirtilen hissenin bilgilerini ve analizini g√∂sterir."""
    try:
        if not context.args or len(context.args) < 1:
            await update.message.reply_text("L√ºtfen bir hisse sembol√º belirtin. √ñrnek: /hisse akbnk")
            return
        
        symbol = context.args[0].lower()
        
        # Sembol kontrol√º
        if symbol not in BIST_SYMBOLS:
            symbols_list = ', '.join(list(BIST_SYMBOLS.keys())[:10]) + "..."
            await update.message.reply_text(
                f"Ge√ßersiz sembol. Sorgulanabilecek sembollerden bazƒ±larƒ±: {symbols_list}\n"
                f"Tam liste i√ßin /liste komutunu kullanƒ±n."
            )
            return
        
        # Kullanƒ±cƒ±ya i≈ülemin ba≈üladƒ±ƒüƒ±nƒ± bildir
        await update.message.reply_text(f"{symbol.upper()} hissesi i√ßin veri alƒ±nƒ±yor...")
        
        # Yahoo Finance API'den veri √ßek
        ticker = yf.Ticker(BIST_SYMBOLS[symbol])
        history = ticker.history(period="6mo")
        
        if history.empty:
            await update.message.reply_text(f"{symbol.upper()} i√ßin veri bulunamadƒ±.")
            return
        
        # Son fiyat bilgileri
        last_price = history['Close'].iloc[-1]
        prev_close = history['Close'].iloc[-2]
        change = ((last_price - prev_close) / prev_close) * 100
        
        # Destek ve diren√ß seviyeleri
        supports, resistances = calculate_support_resistance(history)
        
        # Basit hareketli ortalamalar
        ma50 = history['Close'].rolling(window=50).mean().iloc[-1]
        ma200 = history['Close'].rolling(window=200).mean().iloc[-1]
        
        # Trend durumu
        trend = "YUKARI" if ma50 > ma200 else "A≈ûAƒûI"
        
        # Grafiƒüi olu≈ütur
        plt.figure(figsize=(10, 6))
        plt.plot(history.index, history['Close'], label='Kapanƒ±≈ü Fiyatƒ±')
        plt.plot(history.index, history['Close'].rolling(window=50).mean(), label='50 G√ºnl√ºk Ortalama', color='orange')
        plt.plot(history.index, history['Close'].rolling(window=200).mean(), label='200 G√ºnl√ºk Ortalama', color='red')
        
        # Destek ve diren√ßleri g√∂ster
        for s in supports:
            plt.axhline(y=s, color='green', linestyle='--', alpha=0.7)
        for r in resistances:
            plt.axhline(y=r, color='red', linestyle='--', alpha=0.7)
        
        plt.title(f"{symbol.upper()} - Son 6 Ay")
        plt.xlabel('Tarih')
        plt.ylabel('Fiyat (TL)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # Grafiƒüi hafƒ±zada tut ve g√∂nder
        buffer = BytesIO()
        plt.savefig(buffer, format='png')
        buffer.seek(0)
        
        # Mesaj metnini olu≈ütur
        support_text = "\n".join([f"‚Ä¢ {s:.2f} TL" for s in supports]) if supports else "Tespit edilemedi"
        resistance_text = "\n".join([f"‚Ä¢ {r:.2f} TL" for r in resistances]) if resistances else "Tespit edilemedi"
        
        message = f"""
*{symbol.upper()} Hisse Analizi*

üìä *Son Fiyat:* {last_price:.2f} TL
üìà *Deƒüi≈üim:* {change:.2f}%
üîÑ *Trend:* {trend}

*50 G√ºnl√ºk Ortalama:* {ma50:.2f} TL
*200 G√ºnl√ºk Ortalama:* {ma200:.2f} TL

*Destek Seviyeleri:*
{support_text}

*Diren√ß Seviyeleri:*
{resistance_text}

_Son g√ºncelleme: {history.index[-1].strftime('%d.%m.%Y')}_
"""
        
        # √ñnce grafiƒüi g√∂nder
        await update.message.reply_photo(buffer, caption="Grafik y√ºkleniyor...")
        
        # Sonra analiz sonu√ßlarƒ±nƒ± g√∂nder
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Hisse bilgisi alƒ±nƒ±rken hata olu≈ütu: {e}")
        await update.message.reply_text("Hisse bilgileri alƒ±nƒ±rken bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.")

# Tanƒ±mlanmamƒ±≈ü mesajlara cevap ver
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Bilinmeyen komutlara yanƒ±t verir."""
    await update.message.reply_text(
        "√úzg√ºn√ºm, bu komutu anlamadƒ±m. Yardƒ±m i√ßin /yardim yazabilirsiniz."
    )

def main() -> None:
    """Botu ba≈ülatƒ±r."""
    # Uygulama olu≈ütur
    application = Application.builder().token(TOKEN).build()

    # Komut i≈üleyicilerini ekle
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("hisse", stock_info))
    application.add_handler(CommandHandler("liste", list_stocks))
    application.add_handler(CommandHandler("yardim", help_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # Tanƒ±mlanmamƒ±≈ü komutlarƒ± yakala
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # Botu ba≈ülat
    application.run_polling()

if __name__ == "__main__":
    main()
